name: Test Suite

on:
  workflow_run:
    workflows: ["Code Quality Check"]
    types: [completed]
    branches: [ main ]

# Force l'affichage du nom du workflow
run-name: Test Suite - ${{ github.event.workflow_run.head_commit.message }}

jobs:
  # Check if linting succeeded
  check-lint-success:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Linting passed
        run: echo "Linting workflow completed successfully"

  # Backend tests (uses SQLite)
  backend-tests:
    runs-on: ubuntu-latest
    needs: [check-lint-success]
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test with pytest
      run: pytest --cov=app --cov-report=xml
      env:
        ENVIRONMENT: test
        DATABASE_URL: sqlite:///./test.db
        MISTRAL_API_KEY: fake-api-key-for-tests
        SECRET_KEY: test-secret-key-for-ci-only
        ALGORITHM: HS256
        ACCESS_TOKEN_EXPIRE_MINUTES: 30

  # Frontend tests
  frontend-tests:
    runs-on: ubuntu-latest
    needs: [check-lint-success]
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
    
    - name: Test (if available)
      run: npm test --if-present